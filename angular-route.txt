/* *******************************************************************************************
 * ROUTING AND NAVIGATION
 * https://angular.io/guide/router
 * ******************************************************************************************* */


import { Routes, RouterModule, ... } from '@angular/router';

const routes: Routes = [
  { path: '', component: HomeComponent },
  { path: 'path/:routeParam', component: MyComponent },
  { path: 'staticPath', component: ... },
  { path: '**', component: ... },
  { path: 'oldPath', redirectTo: '/staticPath' },
  { path: ..., component: ..., data: { message: 'Custom' } }
]);

// Configures routes for the application. Supports static, parameterized, redirect, and wildcard 
// routes. Also supports custom route data and resolve.
const routing = RouterModule.forRoot(routes); 

// Marks the location to load the component of the active route.
// <router-outlet></router-outlet>
// <router-outlet name="aux"></router-outlet>

// Creates a link to a different view based on a route instruction consisting of a route path, 
// required and optional parameters, query parameters, and a fragment. To navigate to a root 
// route, use the / prefix; for a child route, use the ./prefix; for a sibling or parent, use the 
// ../ prefix.
// <a routerLink="/path">
// <a [routerLink]="[ '/path', routeParam ]">
// <a [routerLink]="[ '/path', { matrixParam: 'value' } ]">
// <a [routerLink]="[ '/path' ]" [queryParams]="{ page: 1 }">
// <a [routerLink]="[ '/path' ]" fragment="anchor">

// The provided classes are added to the element when the routerLink becomes the current active
// route.
// <a [routerLink]="[ '/path' ]" routerLinkActive="active">  

class CanActivateGuard implements CanActivate {
  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<boolean>|Promise<boolean>|boolean { ... }
}

// An interface for defining a class that the router should call first to determine if it should 
// activate this component. Should return a boolean or an Observable/Promise that resolves to a 
// boolean.
{
  path: ...,
  canActivate: [CanActivateGuard]
}  

class CanDeactivateGuard implements CanDeactivate<T> {
  canDeactivate(
    component: T,
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<boolean>|Promise<boolean>|boolean { ... }
}

// An interface for defining a class that the router should call first to determine if it should 
// deactivate this component after a navigation. Should return a boolean or an Observable/Promise 
// that resolves to a boolean.
{
  path: ...,
  canDeactivate: [CanDeactivateGuard]
}

class CanActivateChildGuard implements CanActivateChild {
  canActivateChild(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<boolean>|Promise<boolean>|boolean { ... }
}

// An interface for defining a class that the router should call first to determine if it should 
// activate the child route. Should return a boolean or an Observable/Promise that resolves to a 
// boolean.
{
  path: ...,
  canActivateChild: [CanActivateGuard],
  children: ...
}

class ResolveGuard implements Resolve<T> {
  resolve(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<any>|Promise<any>|any { ... }
}

// An interface for defining a class that the router should call first to resolve route data 
// before rendering the route. Should return a value or an Observable/Promise that resolves to a 
// value.
{
  path: ...,
  resolve: [ResolveGuard]
}

class CanLoadGuard implements CanLoad {
  canLoad(
    route: Route
  ): Observable<boolean>|Promise<boolean>|boolean { ... }
}

// An interface for defining a class that the router should call first to check if the lazy loaded 
// module should be loaded. Should return a boolean or an Observable/Promise that resolves to a 
// boolean.
{
  path: ...,
  canLoad: [CanLoadGuard],
  loadChildren: ...
}
